//*
//*  File:            DebugTrace.cs
//*  Product:         Integrated Patient Intelligence
//*  Module:          InformaticsCore
//*
//*  Description:
//*
//*  $Author: bill.jordan2 $
//*  $Revision: #2 $
//*  $Date: 2012/06/26 $
//*
//*  Copyright:       (c) 2011 - 2012 Nellcor Puritan Bennett LLC.
//*                   This document contains proprietary information to Nellcor Puritan Bennett LLC.
//*                   Transmittal, receipt or possession of this document does not express, license,
//*                   or imply any rights to use, design or manufacture from this information.
//*                   No reproduction, publication, or disclosure of this information, in whole or in part,
//*                   shall be made without prior written authorization from Nellcor Puritan Bennett LLC.


using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;

namespace Covidien.Ipi.InformaticsCore
{
    /// <summary>
    /// DebugTrace - a trace object intended for logging data from Applications
    /// </summary>
    public class DebugTrace : HealthPerformanceTraceBase
    {
        public const string DebugConfigKey = "IpiTracing\\EnableDebugTracing";
        public const string EVENT_DATA_ROOT = "EventData";
        public const string APPLICATION_DATA_NODE = "ApplicationData";
        public const string EQUAL_SIGN = "=";
        public const char DOUBLE_QUOTE = '"';

        private Dictionary<string, object> mXmlElementData;
        private string mEventData;

        private static bool mIsDebugEnabled=false;
        private static bool mDebugFlagChecked=false;

        public static bool DebugEnabled
        {
            get
            {
                if (!mDebugFlagChecked)
                {
                    mDebugFlagChecked = true;
                    try
                    {
                        mIsDebugEnabled = ConfigXml.Instance.GetAsBool(DebugConfigKey);
                    }
                    catch (IpiConfigurationEvaluationException)
                    {
                        mIsDebugEnabled = false;
                    }
                }
                return mIsDebugEnabled;
            }
        }

        /// <summary>
        /// Pass in element data to trace message
        /// </summary>
        /// <param name="elementName"></param>
        /// <param name="elementValue"></param>
        public void SetDataElement(string elementName, string elementValue)
        {
            if (null != elementName)
            {
                if ( null != elementValue && elementValue.Contains(EQUAL_SIGN))
                {
                    //Data contains some attributes.  so first break on imbedded quote
                    Dictionary<string,string> attributes = new Dictionary<string, string>();
                    string[] nameValueAttributes = elementValue.Split(DOUBLE_QUOTE);
                    for (int i = 0; i < nameValueAttributes.Length; i=i+2)
                    {
                        if (!String.IsNullOrEmpty(nameValueAttributes[i]) && i+1 < nameValueAttributes.Length)
                        {
                            attributes.Add(nameValueAttributes[i].Substring(0, nameValueAttributes[i].IndexOf(EQUAL_SIGN)),
                                nameValueAttributes[i + 1]);
                        }
                    }
                    mXmlElementData.Add(elementName, attributes);
                }
                else
                {
                    mXmlElementData.Add(elementName, elementValue);
                }
            }
        }

        
        /// <summary>
        /// DebugTrace constructor
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        public DebugTrace(string eventDescription, string eventData) :
            base(EventCategoryType.DebugTrace, (int)IpiEventCode.IpiDebugMessage, eventDescription, EventStatusType.Debug)
        {
            mEventData = eventData;
            mXmlElementData = new Dictionary<string, object>();
        }

        /// <summary>
        /// DebugTrace constructor
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        public DebugTrace(string eventDescription) :
            base(EventCategoryType.DebugTrace, (int)IpiEventCode.IpiDebugMessage, eventDescription, EventStatusType.Debug)
        {
            mXmlElementData = new Dictionary<string, object>();
        }

        /// <summary>
        /// Static helper method to avoid instiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        public static void Trace(string eventDescription, string eventData)
        {
            if (DebugEnabled)
            {
                DebugTrace trace = new DebugTrace(eventDescription, eventData);
                trace.TraceData();
            }
        }


        /// <summary>
        /// Static helper method to avoid instiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        public static void Trace(string eventDescription)
        {
            if (DebugEnabled)
            {
                DebugTrace trace = new DebugTrace(eventDescription);
                trace.TraceData();
            }
        }


        /// <summary>
        /// DebugTrace constructor
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        /// <param name="userAccountId">User that is currently associated to the event.</param>
        /// <param name="operatedOnUserAccountId">User that the above use is pretending to be.</param>
        public DebugTrace(string eventDescription, 
                                string eventData,
                                int userAccountId,
                                int operatedOnUserAccountId) :
            base(EventCategoryType.DebugTrace, 
                 (int)IpiEventCode.IpiDebugMessage, 
                 eventDescription,
                 EventStatusType.Debug,
                 userAccountId,
                 operatedOnUserAccountId)
        {
            mXmlElementData = new Dictionary<string, object>();
            mEventData = eventData;
        }

        /// <summary>
        /// Formats the data into an XML Document structure.
        /// </summary>
        /// <param name="eventData">data for message</param>
        /// <returns></returns>
        private string XMLStructureEventData()
        {
            StringBuilder sb = new StringBuilder();

            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            StringBuilder builder = new StringBuilder();

            using (XmlWriter writer = XmlWriter.Create(builder, settings))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement(EVENT_DATA_ROOT);
                writer.WriteStartElement(APPLICATION_DATA_NODE);
                writer.WriteString(mEventData ?? String.Empty);
                foreach (KeyValuePair<string,object> elementData in mXmlElementData)
                {
                    writer.WriteStartElement(elementData.Key);
                    if (elementData.Value is Dictionary<string,string>)
                    {
                        foreach (KeyValuePair<string,string> attributePair in (Dictionary<string,string>)elementData.Value)
                        {
                            writer.WriteAttributeString(attributePair.Key,attributePair.Value);
                        }
                    }
                    else
                    {
                        writer.WriteString(elementData.Value.ToString());
                    }
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
            return builder.ToString();
        }

        /// <summary>
        /// Static helper method to avoid instiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        /// <param name="userAccountId"></param>
        /// <param name="operatedOnUserAccountId"></param>
        public static void Trace(string eventDescription, 
                                 string eventData,
                                 int userAccountId,
                                 int operatedOnUserAccountId)
        {
            if (DebugEnabled)
            {
                DebugTrace trace = new DebugTrace(eventDescription,
                                                  eventData,
                                                  userAccountId,
                                                  operatedOnUserAccountId);
                trace.TraceData();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public override void TraceData()
        {
            if (DebugEnabled)
            {
                if (null != mEventData || mXmlElementData.Count > 0)
                {
                    EventData = this.XMLStructureEventData();
                }
                base.TraceData();
            }
        }

    }
}
