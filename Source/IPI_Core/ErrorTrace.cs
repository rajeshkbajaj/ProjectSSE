//*
//*  File:            ErrorTrace.cs
//*  Product:         Integrated Patient Intelligence
//*  Module:          InformaticsCore
//*
//*  Description:
//*
//*  $Author: bill.jordan2 $
//*  $Revision: #2 $
//*  $Date: 2012/06/26 $
//*
//*  Copyright:       (c) 2011 - 2012 Nellcor Puritan Bennett LLC.
//*                   This document contains proprietary information to Nellcor Puritan Bennett LLC.
//*                   Transmittal, receipt or possession of this document does not express, license,
//*                   or imply any rights to use, design or manufacture from this information.
//*                   No reproduction, publication, or disclosure of this information, in whole or in part,
//*                   shall be made without prior written authorization from Nellcor Puritan Bennett LLC.


using System;
using System.Text;
using System.Xml;
using System.Collections.Generic;

namespace Covidien.Ipi.InformaticsCore
{
    /// <summary>
    /// ErrorTrace - a trace object intended for logging error and excetion data 
    /// </summary>
    public class ErrorTrace : HealthPerformanceTraceBase
    {
        public const string EVENT_DATA_ROOT = "EventData";
        public const string DATA_NODE = "DetailData";
        public const string EXCEPTION_MESSAGE_NODE = "ExceptionMessage";
        public const string INNER_EXCEPTION_NODE = "InnerException";
        public const string STACK_TRACE_NODE =  "StackTrace";

        /// <summary>
        /// ErrorTrace constructor - currently empty, calls base with EventCategoryType.ErrorTrace
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        /// <param name="startEvent">start time of the event</param>
        /// <param name="endEvent">end time of the event</param>
        public ErrorTrace(IpiEventCode eventCode, 
                          string eventDescription, 
                          EventStatusType eventStatus, 
                          string eventData, 
                          DateTime startEvent, 
                          DateTime endEvent) : 
                    base (EventCategoryType.ErrorTrace,
                          (int)eventCode, 
                          eventDescription, 
                          eventStatus, 
                          eventData, 
                          startEvent, 
                          endEvent)
        {
        }

        /// <summary>
        /// Constructor for ErrorTrace
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        public ErrorTrace(IpiEventCode eventCode, 
                          string eventDescription, 
                          EventStatusType eventStatus, 
                          Exception exception) :
            base(EventCategoryType.ErrorTrace,
                 (int)eventCode, 
                 eventDescription, 
                 eventStatus)
        {
            EventData = FormatExceptionAsXML(exception);
        }

        /// <summary>
        /// Constructor for ErrorTrace
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        public ErrorTrace(IpiEventCode eventCode,
                          string eventDescription,
                          EventStatusType eventStatus,
                          string detailData) :
            base(EventCategoryType.ErrorTrace,
                 (int)eventCode,
                 eventDescription,
                 eventStatus)
        {
            EventData = FormatExceptionAsXML(detailData);
        }


        /// <summary>
        /// Constructor for ErrorTrace
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        /// <param name="userAccountId"></param>
        /// <param name="operatedOnUserAccountId"></param>
        public ErrorTrace(IpiEventCode eventCode,
                          string eventDescription,
                          EventStatusType eventStatus,
                          Exception exception, 
                          int userAccountId,
                          int operatedOnUserAccountId) :
            base(EventCategoryType.ErrorTrace,
                 (int)eventCode,
                 eventDescription,
                 eventStatus,
                 userAccountId,
                 operatedOnUserAccountId)
        {
            EventData = FormatExceptionAsXML(exception);
        }

        /// <summary>
        /// Constructor for ErrorTrace
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        public ErrorTrace(IpiEventCode eventCode, 
                          string eventDescription, 
                          EventStatusType eventStatus) :
            base(EventCategoryType.ErrorTrace,
                 (int)eventCode, 
                 eventDescription, 
                 eventStatus)
        {
        }

        /// <summary>
        /// Static helper method to avoid instantiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        /// <param name="startEvent">start time of the event</param>
        /// <param name="endEvent">end time of the event</param>
        public static void Trace(IpiEventCode eventCode, 
                                 string eventDescription, 
                                 EventStatusType eventStatus, 
                                 string eventData, 
                                 DateTime startEvent, 
                                 DateTime endEvent)
        {
            ErrorTrace trace = new ErrorTrace(eventCode, 
                                              eventDescription, 
                                              eventStatus, 
                                              eventData, 
                                              startEvent, 
                                              endEvent);
            trace.TraceData();
        }

        /// <summary>
        /// Static helper method to avoid instantiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        public static void Trace(IpiEventCode eventCode, 
                                 string eventDescription, 
                                 EventStatusType eventStatus, 
                                 Exception exception)
        {
            ErrorTrace trace = new ErrorTrace(eventCode, 
                                              eventDescription, 
                                              eventStatus, 
                                              exception);
            trace.TraceData();
        }

        /// <summary>
        /// Static helper method to avoid instantiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        public static void Trace(IpiEventCode eventCode,
                                 string eventDescription,
                                 EventStatusType eventStatus,
                                 string detailData)
        {
            ErrorTrace trace = new ErrorTrace(eventCode,
                                              eventDescription,
                                              eventStatus,
                                              detailData);
            trace.TraceData();
        }

        /// <summary>
        /// Static helper method to avoid instantiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="exception">the exception object raised by the caller</param>
        /// <param name="userAccountId"></param>
        /// <param name="operatedOnUserAccountId"></param>
        public static void Trace(IpiEventCode eventCode,
                                 string eventDescription,
                                 EventStatusType eventStatus,
                                 Exception exception,
                                 int userAccountId,
                                 int operatedOnUserAccountId)
        {
            ErrorTrace trace = new ErrorTrace(eventCode,
                                              eventDescription,
                                              eventStatus,
                                              exception,
                                              userAccountId,
                                              operatedOnUserAccountId);
            trace.TraceData();
        }

        /// <summary>
        /// Static helper method to avoid instantiating the object every time
        /// </summary>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        public static void Trace(IpiEventCode eventCode, 
                                 string eventDescription, 
                                 EventStatusType eventStatus)
        {
            ErrorTrace trace = new ErrorTrace(eventCode, 
                                              eventDescription, 
                                              eventStatus);
            trace.TraceData();
        }


        /// <summary>
        /// Ensure the message only contains printable ASCII, converting non-printables to the XML representation of same
        /// </summary>
        /// <param name="srcStr">Input string, possibly with non-printable characters</param>
        /// <returns>Output string with only printable characters</returns>
        public static string XMLNonPrintableEncoder( string srcStr, out bool diff )
        {
            string dstStr;
            List<char> badChars = null;
            foreach( char ch in srcStr )
            {
                if  ( ( ( ch < 0x20 )  ||  ( 0x80 <= ch ) )  &&  ( ch != 0x0A )  &&  ( ch != 0x0D ) )
                {
                    if  ( null == badChars )
                    {
                        badChars = new List<char>() ;
                    }
                    if  ( !badChars.Contains( ch ) )
                    {
                        badChars.Add( ch ) ;
                    }
                }
            }
            if  ( null != badChars )
            {
                dstStr = srcStr ;
                foreach( char ch in badChars )
                {
                    dstStr = dstStr.Replace( "" + ch, "&#" + (int) ch ) ;
                }
                diff = true;
                if (dstStr.Length > 4000)
                    return (dstStr.Substring(200, 3800));
                return( dstStr ) ;
            }                                                         
            else
            {
                diff = false;
                return( srcStr ) ;
            }
        }

        /// <summary>
        /// Formats the exception data into a valid XML document and returns it as a string
        /// </summary>
        /// <param name="exception">exception to be parsed</param>
        /// <returns>xml document as a string</returns>
        private static string FormatExceptionAsXML(Exception exception)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            // settings.Encoding = Encoding.ASCII; // hoping to force a \b to an &#08 or equivalent that doesn't blow the system - didn't work
            StringBuilder builder = new StringBuilder();

            using (XmlWriter writer = XmlWriter.Create(builder, settings))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement(EVENT_DATA_ROOT);
                writer.WriteStartElement(EXCEPTION_MESSAGE_NODE);
                try
                {
                    if  ( null != exception.Message )
                    {
                        bool diff ;
                        string tmp = XMLNonPrintableEncoder( exception.Message, out diff ) ;
                        if  ( diff )
                        {
                            writer.WriteCData( tmp ) ;
                        }
                        else
                        {
                            writer.WriteString( tmp ) ;
                        }
                    }
                    else
                    {
                        writer.WriteString( String.Empty ) ;
                    }
                }
                catch( Exception )
                {
                    writer.WriteString( "Failed to write exception.Message" ) ;
                }
                writer.WriteEndElement();
                writer.WriteStartElement(INNER_EXCEPTION_NODE);
                try
                {
                    if  ( null != exception.InnerException )
                    {
                        bool diff ;
                        string tmp = XMLNonPrintableEncoder( exception.InnerException.ToString(), out diff ) ;
                        if  ( diff )
                        {
                            writer.WriteCData( tmp ) ;
                        }
                        else
                        {
                            writer.WriteString( tmp ) ;
                        }
                    }
                    else
                    {
                        writer.WriteString( String.Empty ) ;
                    }
                }
                catch (Exception)
                {
                    writer.WriteString( "Failed to write exception.InnerException" ) ;
                }
                writer.WriteEndElement();
                writer.WriteStartElement(STACK_TRACE_NODE);
                try
                {
                    if  ( null != exception.StackTrace )
                    {
                        bool diff ;
                        string tmp = XMLNonPrintableEncoder( exception.StackTrace, out diff ) ;
                        if  ( diff )
                        {
                            writer.WriteCData( tmp ) ;
                        }
                        else
                        {
                            writer.WriteString( tmp ) ;
                        }
                    }
                    else
                    {
                        writer.WriteString( String.Empty ) ;
                    }
                }
                catch (Exception)
                {
                    writer.WriteString( "Failed to write exception.StackTrace" ) ;
                }
                writer.WriteEndElement();
                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
            return builder.ToString();
        }

        /// <summary>
        /// Formats the exception data into a valid XML document and returns it as a string
        /// </summary>
        /// <param name="exception">exception to be parsed</param>
        /// <returns>xml document as a string</returns>
        private static string FormatExceptionAsXML(string detailData)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            // settings.Encoding = Encoding.ASCII; // hoping to force a \b to an &#08 or equivalent that doesn't blow the system - didn't work
            StringBuilder builder = new StringBuilder();

            using (XmlWriter writer = XmlWriter.Create(builder, settings))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement(EVENT_DATA_ROOT);
                writer.WriteStartElement(DATA_NODE);
                try
                {
                    if  ( null != detailData )
                    {
                        bool diff ;
                        string tmp = XMLNonPrintableEncoder( detailData, out diff ) ;
                        if  ( diff )
                        {
                            writer.WriteCData( tmp ) ;
                        }
                        else
                        {
                            writer.WriteString( tmp ) ;
                        }
                    }
                    else
                    {
                        writer.WriteString( String.Empty ) ;
                    }
                }
                catch (Exception)
                {
                    writer.WriteString( "Failed to write detailData" ) ;
                }
                writer.WriteEndElement();
                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
            return builder.ToString();
        }
    }
}
