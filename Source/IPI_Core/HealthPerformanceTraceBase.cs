//*
//*  File:            HealthPerformanceTraceBase.cs
//*  Product:         Integrated Patient Intelligence
//*  Module:          InformaticsCore
//*
//*  Description:
//*
//*  $Author: bill.jordan2 $
//*  $Revision: #3 $
//*  $Date: 2012/06/26 $
//*
//*  Copyright:       (c) 2011 - 2012 Nellcor Puritan Bennett LLC.
//*                   This document contains proprietary information to Nellcor Puritan Bennett LLC.
//*                   Transmittal, receipt or possession of this document does not express, license,
//*                   or imply any rights to use, design or manufacture from this information.
//*                   No reproduction, publication, or disclosure of this information, in whole or in part,
//*                   shall be made without prior written authorization from Nellcor Puritan Bennett LLC.


using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Xml;

namespace Covidien.Ipi.InformaticsCore
{

    /// <summary>
    /// enumerates the event categories
    /// </summary>
    public enum EventCategoryType
    {
        ErrorTrace = 1,
        ThreadTrace,
        TaskTrace,
        ApplicationTrace,
        ServiceRequestTrace,
        DebugTrace
    }

    /// <summary>
    /// enumerates event statuses
    /// </summary>
    public enum EventStatusType
    {
        Debug = 0,
        Info = 1,
        Warning,
        Error,
        Critical
    }

    /// <summary>
    /// HealthPerformanceTraceBase - base object from which all Trace objects are derived
    /// </summary>
    public abstract class HealthPerformanceTraceBase
    {
        // length (minus 1) of the EventDescription field of the HealthPerformEvent table
        // would be nice to get this programmatically in case it changes...
        private const int MAX_DESCRIPTION_LENGTH = 254;

        public const string EVENT_DATA_ROOT_START = "<EventData>";
        public const string EVENT_DATA_ROOT_END = "</EventData>";
        public const string XML1 = EVENT_DATA_ROOT_START + "<BaseData>";
        public const string XML2 = "</BaseData>" + EVENT_DATA_ROOT_END;

        public EventCategoryType EventCategoryId { get; set; }
        public string EventData { get; set; }
        public EventStatusType EventStatus { get; set; }
        public DateTime StartEvent { get; set; }
        public DateTime? EndEvent { get; set; }
        public string EventDescription { get; set; }
        public int EventCode { get; set; }
        public int? UserAccountId { get; set; }
        public string SourceId { get; set; }
        public string ServerId { get; set; }
        public string IPAddress { get; set; }
        public int OperatedOnUserAccountId { get; set; }

        /// <summary>
        /// Adding default constructor
        /// </summary>
        protected HealthPerformanceTraceBase()
        {
            
        }
        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="eventData">data to be stored specific to the caller</param>
        /// <param name="startEvent">start time of the event</param>
        /// <param name="endEvent">end time of the event</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             EventStatusType eventStatus,
                                             string eventData,
                                             DateTime startEvent,
                                             DateTime endEvent)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            if (string.IsNullOrEmpty(eventData))
            {
                eventData.Replace(",", CoreConstants.COMMA_ESCAPE_STRING);
            }

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = eventStatus;
            EventData = XML1 + eventData + XML2;
            StartEvent = startEvent;
            EndEvent = endEvent;
            EventCode = eventCode;
            UserAccountId = null;
            SourceId = null;
            ServerId = null;
            IPAddress = null;
        }

        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             EventStatusType eventStatus)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = eventStatus;
            StartEvent = DateTime.Now;
            EndEvent = DateTime.Now;
            EventCode = eventCode;
            UserAccountId = null;
            SourceId = null;
            ServerId = null;
            IPAddress = null;
        }

        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = EventStatusType.Info;
            StartEvent = DateTime.Now;
            EndEvent = DateTime.Now;
            EventCode = eventCode;
            UserAccountId = null;
            SourceId = null;
            ServerId = null;
            IPAddress = null;
        }

        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">enum of type EventStatusType</param>
        /// <param name="userAccountId">The user account ID</param>
        /// <param name="operatedOnUserAccountId">The virtual user account ID</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             EventStatusType eventStatus,
                                             int userAccountId,
                                             int operatedOnUserAccountId)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = eventStatus;
            StartEvent = DateTime.Now;
            EndEvent = DateTime.Now;
            EventCode = eventCode;
            UserAccountId = userAccountId;
            OperatedOnUserAccountId = operatedOnUserAccountId;
            SourceId = null;
            ServerId = null;
            IPAddress = null;
        }


        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="userAccountId">The user id</param>
        /// <param name="operatedOnUserAccountId">The virtual user id</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             int userAccountId,
                                             int operatedOnUserAccountId)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = EventStatusType.Info;
            StartEvent = DateTime.Now;
            EndEvent = DateTime.Now;
            EventCode = eventCode;
            UserAccountId = userAccountId;
            OperatedOnUserAccountId = operatedOnUserAccountId;
            SourceId = null;
            ServerId = null;
            IPAddress = null;
        }


        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">The final status of the event reqest.  (error, warning, info)</param>
        /// <param name="userAccountId">The user id of the user that made the request that caused the error or called the service</param>
        /// <param name="serverId">ID of the server that made the request</param>
        /// <param name="ipAddress">IP address that the request was made from</param>
        /// <param name="startEvent">The date and time the event started</param>
        /// <param name="endEvent">The date and time the event was completed</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             EventStatusType eventStatus,
                                             int userAccountId,
                                             string serverId,
                                             string ipAddress,
                                             DateTime startEvent,
                                             DateTime endEvent)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = eventStatus;
            StartEvent = startEvent;
            EndEvent = endEvent;
            EventCode = eventCode;
            UserAccountId = userAccountId;
            SourceId = null;
            ServerId = serverId;
            IPAddress = ipAddress;
        }

        /// <summary>
        /// Constructor for HealthPerformanceTraceBase
        /// </summary>
        /// <param name="eventType">enum of type EventCategoryType</param>
        /// <param name="eventCode">an int containing the event code generated by the caller</param>
        /// <param name="eventDescription">a string containing a description of the event code generated by the caller</param>
        /// <param name="eventStatus">The final status of the event reqest.  (error, warning, info)</param>
        /// <param name="userAccountId">The user id of the user that made the request that caused the error or called the service</param>
        /// <param name="serverId">ID of the server that made the request</param>
        /// <param name="ipAddress">IP address that the request was made from</param>
        protected HealthPerformanceTraceBase(EventCategoryType eventType,
                                             int eventCode,
                                             string eventDescription,
                                             EventStatusType eventStatus,
                                             int userAccountId,
                                             string serverId,
                                             string ipAddress)
        {
            IpiAssert.IsNotNull(eventCode, "eventCode");

            EventCategoryId = eventType;

            if (!string.IsNullOrEmpty(eventDescription))
            {
                EventDescription = eventDescription.Length > MAX_DESCRIPTION_LENGTH ? eventDescription.Substring(0, MAX_DESCRIPTION_LENGTH) : eventDescription;
            }
            else
            {
                EventDescription = eventDescription;
            }

            EventStatus = EventStatusType.Info;
            StartEvent = DateTime.Now;
            EndEvent = DateTime.Now;
            EventCode = eventCode;
            UserAccountId = userAccountId;
            SourceId = null;
            ServerId = serverId;
            IPAddress = ipAddress;
        }

        public virtual void TraceData()
        {
            // Check to make sure that this isn't an infinite loop
            StackTrace stackTrace = new StackTrace();
            StackFrame[] stackFrames = stackTrace.GetFrames();

            bool wasFound = false;

            for (int i = 3; i < stackFrames.Length; i++)
            {
                if (stackFrames[i].GetMethod().Name.Contains(MethodBase.GetCurrentMethod().Name))
                {
                    wasFound = true;
                    break;
                }
            }

            if (!wasFound)
            {
                HealthPerformanceTrace.Instance.TraceData(this);
            }
        }

        /// <summary>
        /// Overrides the ToString() method and
        /// Takes what is in the HealthPerformanceTraceBase object and converts it to an xml string
        /// </summary>
        /// <returns>Returns an xml format string</returns>
        public override string ToString()
        {
            return GetXmlString();
        }

        /// <summary>
        /// Takes what is in the HealthPerformanceTraceBase object and converts it to an xml string
        /// </summary>
        /// <returns>Returns an xml format string</returns>
        public string ToXml()
        {
            return GetXmlString();
        }

        /// <summary>
        /// Takes what is in the HealthPerformanceTraceBase object and converts it to an xml string
        /// </summary>
        /// <returns>A string in xml format</returns>
        private string GetXmlString()
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                using (XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter))
                {
                    const string ROOT = "r";
                    const string START_ELEMENT = "<r>";
                    const string END_ELEMENT = "</r>";
                    const string START_EVENT = "StartEvent";
                    const string END_EVENT = "EndEvent";
                    const string EVENT_CODE = "EventCode";
                    const string EVENT_DATA = "EventData";
                    const string EVENT_DESCRIPTION = "EventDescription";
                    const string EVENT_CATEGORY_ID = "EventCategoryId";

                    // Create the document
                    xmlTextWriter.WriteStartDocument();
                    // Create the root node
                    xmlTextWriter.WriteStartElement(ROOT);
                    // Create all the child nodes
                    xmlTextWriter.WriteElementString(EVENT_DESCRIPTION, EventDescription);
                    xmlTextWriter.WriteElementString(START_EVENT, StartEvent.ToString());
                    xmlTextWriter.WriteElementString(END_EVENT, EndEvent.ToString());
                    xmlTextWriter.WriteElementString(EVENT_CODE, EventCode.ToString());
                    xmlTextWriter.WriteElementString(EVENT_DATA, EventData);
                    xmlTextWriter.WriteElementString(EVENT_CATEGORY_ID, ((int)EventCategoryId).ToString());
                    // Create the ending root node
                    xmlTextWriter.WriteEndElement();
                    xmlTextWriter.WriteEndDocument();

                    // Send the final xml to the StringWriter object
                    xmlTextWriter.Flush();

                    // Send the final text to a string variable
                    string xmlString = stringWriter.ToString();

                    // Set the starting and ending positions for the actual text that goes into the log file
                    int startPosition = xmlString.IndexOf(START_ELEMENT) + 3;
                    int endPosition = xmlString.IndexOf(END_ELEMENT);

                    // Return the final string
                    return xmlString.Substring(startPosition, endPosition - startPosition);
                }
            }
        }
    }
}
